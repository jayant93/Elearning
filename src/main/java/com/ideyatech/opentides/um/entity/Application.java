package com.ideyatech.opentides.um.entity;

import com.couchbase.client.java.repository.annotation.Field;
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.ideyatech.opentides.core.annotation.Auditable;
import com.ideyatech.opentides.core.entity.BaseEntity;
import org.springframework.data.couchbase.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.DBRef;
import org.springframework.scheduling.annotation.EnableAsync;

import javax.persistence.*;

/**
 * Created by Gino on 8/30/2016.
 */
//@org.springframework.data.mongodb.core.mapping.Document
@Document
@Auditable(excludeFields = {"adminUser", "passwordRules"})
@Entity
@Table(name = "APPLICATION")
public class Application extends BaseEntity {

    /**
     * Unique link for the application. Generated by the system
     */
    @Field
    @Column(name = "LINK", unique = true)
    private String link;

    /**
     * Name of the application
     */
    @Field
    @Column(name = "NAME", unique = true)
    private String name;

    /**
     * Description of the application
     */
    @Field
    @Column(name = "DESCRIPTION")
    private String description;

    /**
     * The admin user generated for this application
     */
    @OneToOne
    @JoinColumn(name = "OWNER_ID")
    @DBRef
    private BaseUser adminUser;

    /**
     *
     */
    @OneToOne(mappedBy = "application")
    @Field
    @JsonManagedReference
    private PasswordRules passwordRules;

    /**
     * The application secret generated after a successful application registration
     */
    @Column(name = "APP_SECRET", length = 4000)
    @Field
    private String appSecret;

    /**
     * Main Email address of the application.
     */
    @Column(name = "EMAIL_ADDRESS", unique = true)
    @Field
    private String emailAddress;

    /**
     * If the application is going to allow FB Login
     */
    @Column(name = "ALLOW_FB_LOGIN")
    @Field
    private Boolean allowFbLogin;

    /**
     * Facebook app ID
     */
    @Column(name = "FB_APP_ID")
    @Field
    private String fbAppId;

    /**
     * Facebook app secret
     */
    @Column(name = "FB_APP_SECRET")
    @Field
    private String fbAppSecret;

    /**
     * If the applicaiton will use an LDAP server
     */
    @Column(name = "USE_LDAP")
    @Field
    private Boolean useLdap;

    /**
     * The LDAP server to use if useLdap is set to true
     */
    @Column(name = "LDAP_SERVER")
    @Field
    private String ldapServer;

    /**
     * Number of failed login attempts before locking a user
     */
    @Column(name = "FAILED_LOGIN_ATTEMPTS")
    @Field
    private Integer failedLoginAttempts;

    /**
     * The number of seconds user will be locked out
     */
    @Column(name = "LOCKOUT_TIME")
    @Field
    private Long lockoutTime;

    /**
     * If the application will send activation email for users
     */
    @Column(name = "SEND_ACTIVATION_EMAIL")
    @Field
    private Boolean sendActivationEmail;

    @Transient
    private transient UserGroup adminUserGroup;

    @Transient
    private transient String adminPassword;

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    /**
     * Sets new If the applicaiton will use an LDAP server.
     *
     * @param useLdap New value of If the applicaiton will use an LDAP server.
     */
    public void setUseLdap(Boolean useLdap) {
        this.useLdap = useLdap;
    }

    /**
     * Sets new The LDAP server to use if useLdap is set to true.
     *
     * @param ldapServer New value of The LDAP server to use if useLdap is set to true.
     */
    public void setLdapServer(String ldapServer) {
        this.ldapServer = ldapServer;
    }

    /**
     * Gets Name of the application.
     *
     * @return Value of Name of the application.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets new Description of the application.
     *
     * @param description New value of Description of the application.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets Number of failed login attempts before locking a user.
     *
     * @return Value of Number of failed login attempts before locking a user.
     */
    public Integer getFailedLoginAttempts() {
        return failedLoginAttempts;
    }

    /**
     * Gets If the application is going to allow FB Login.
     *
     * @return Value of If the application is going to allow FB Login.
     */
    public Boolean getAllowFbLogin() {
        return allowFbLogin;
    }

    /**
     * Sets new If the application is going to allow FB Login.
     *
     * @param allowFbLogin New value of If the application is going to allow FB Login.
     */
    public void setAllowFbLogin(Boolean allowFbLogin) {
        this.allowFbLogin = allowFbLogin;
    }

    public String getFbAppId() {
        return fbAppId;
    }

    public void setFbAppId(String fbAppId) {
        this.fbAppId = fbAppId;
    }

    public String getFbAppSecret() {
        return fbAppSecret;
    }

    public void setFbAppSecret(String fbAppSecret) {
        this.fbAppSecret = fbAppSecret;
    }

    /**
     * Gets Main Email address of the application..
     *
     * @return Value of Main Email address of the application..
     */
    public String getEmailAddress() {
        return emailAddress;
    }

    /**
     * Sets new Main Email address of the application..
     *
     * @param emailAddress New value of Main Email address of the application..
     */
    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    /**
     * Sets new If the application will send activation email for users.
     *
     * @param sendActivationEmail New value of If the application will send activation email for users.
     */
    public void setSendActivationEmail(Boolean sendActivationEmail) {
        this.sendActivationEmail = sendActivationEmail;
    }

    /**
     * Gets If the application will send activation email for users.
     *
     * @return Value of If the application will send activation email for users.
     */
    public Boolean getSendActivationEmail() {
        return sendActivationEmail;
    }

    /**
     * Gets If the applicaiton will use an LDAP server.
     *
     * @return Value of If the applicaiton will use an LDAP server.
     */
    public Boolean getUseLdap() {
        return useLdap;
    }

    /**
     * Gets Description of the application.
     *
     * @return Value of Description of the application.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets new Name of the application.
     *
     * @param name New value of Name of the application.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets new Number of failed login attempts before locking a user.
     *
     * @param failedLoginAttempts New value of Number of failed login attempts before locking a user.
     */
    public void setFailedLoginAttempts(Integer failedLoginAttempts) {
        this.failedLoginAttempts = failedLoginAttempts;
    }

    /**
     * Gets The LDAP server to use if useLdap is set to true.
     *
     * @return Value of The LDAP server to use if useLdap is set to true.
     */
    public String getLdapServer() {
        return ldapServer;
    }

    /**
     * Gets The admin user generated for this application.
     *
     * @return Value of The admin user generated for this application.
     */
    public BaseUser getAdminUser() {
        return adminUser;
    }

    /**
     * Sets new The admin user generated for this application.
     *
     * @param adminUser New value of The admin user generated for this application.
     */
    public void setAdminUser(BaseUser adminUser) {
        this.adminUser = adminUser;
    }

    public String getAppSecret() {
        return appSecret;
    }

    public void setAppSecret(String appSecret) {
        this.appSecret = appSecret;
    }

    public PasswordRules getPasswordRules() {
        return passwordRules;
    }

    public void setPasswordRules(PasswordRules passwordRules) {
        this.passwordRules = passwordRules;
    }

    public UserGroup getAdminUserGroup() {
        return adminUserGroup;
    }

    public void setAdminUserGroup(UserGroup adminUserGroup) {
        this.adminUserGroup = adminUserGroup;
    }

    public String getAdminPassword() {
        return adminPassword;
    }

    public void setAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
    }

    public Long getLockoutTime() {
        return lockoutTime;
    }

    public void setLockoutTime(Long lockoutTime) {
        this.lockoutTime = lockoutTime;
    }

    public boolean isEnableUserLockCheck() {
        if(getFailedLoginAttempts() == null || getFailedLoginAttempts() <= 0) {
            return false;
        }
        return true;
    }

    @PrePersist
    @PreUpdate
    public void prePersist() {
        if(this.allowFbLogin == null) {
            this.setAllowFbLogin(false);
        }
        if(this.useLdap == null) {
            this.setUseLdap(false);
        }
        if(this.failedLoginAttempts == null) {
            this.setFailedLoginAttempts(-1);
        }
        if(this.sendActivationEmail == null) {
            this.setSendActivationEmail(false);
        }
        if(this.lockoutTime == null) {
            //Default is 15 minutes
            this.setLockoutTime(15l * 60l);
        }
    }

}
